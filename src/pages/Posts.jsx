import React, { useState, useEffect } from "react";
import { useParams, Link } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import { fetchPosts, fetchPostBySlugAction, likePost, savePost } from "../features/posts/postSlice";
import { getComments, createComment } from "../services/api";
import { useAuth } from "../hooks/useAuth";
import { useNotification } from "../context/NotificationContext";
import PostCard from "../features/posts/PostCard";

const Posts = () => {
  const { slug } = useParams();
  const dispatch = useDispatch();
  const { user } = useAuth();
  const { success: showSuccess, error: showError, warning: showWarning } = useNotification();
  const { posts, currentPost, loading, error } = useSelector((state) => state.posts);
  
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("");
  const [sortBy, setSortBy] = useState("created_at");
  const [newComment, setNewComment] = useState("");
  const [isLiking, setIsLiking] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [comments, setComments] = useState([]);
  const [commentsLoading, setCommentsLoading] = useState(false);
  const [isSubmittingComment, setIsSubmittingComment] = useState(false);

  useEffect(() => {
    if (slug) {
      dispatch(fetchPostBySlugAction(slug));
    } else {
      dispatch(fetchPosts({ 
        search: searchQuery, 
        category: selectedCategory, 
        ordering: sortBy 
      }));
    }
  }, [dispatch, slug, searchQuery, selectedCategory, sortBy]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞
  useEffect(() => {
    const loadComments = async () => {
      if (slug && currentPost) {
        try {
          setCommentsLoading(true);
          console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞ ID:', currentPost.id); // –û—Ç–ª–∞–¥–∫–∞
          const commentsData = await getComments({ post: currentPost.id });
          console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:', commentsData); // –û—Ç–ª–∞–¥–∫–∞
          setComments(commentsData.results || commentsData);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
        } finally {
          setCommentsLoading(false);
        }
      }
    };

    loadComments();
  }, [slug, currentPost]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const handleLike = async () => {
    if (!user) {
      showWarning('–î–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∞–π–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
      return;
    }

    try {
      setIsLiking(true);
      await dispatch(likePost(currentPost.slug)).unwrap();
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤
      dispatch(fetchPostBySlugAction(slug));
      showSuccess('–õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω!');
    } catch (error) {
      showError(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∞–π–∫–∞');
    } finally {
      setIsLiking(false);
    }
  };

  const handleSave = async () => {
    if (!user) {
      showWarning('–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
      return;
    }

    try {
      setIsSaving(true);
      await dispatch(savePost(currentPost.slug)).unwrap();
      showSuccess('–ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
    } catch (error) {
      showError(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞');
    } finally {
      setIsSaving(false);
    }
  };

  const handleCommentSubmit = async (e) => {
    e.preventDefault();
    if (!user) {
      showWarning('–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
      return;
    }

    if (!newComment.trim()) {
      showWarning('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
      return;
    }

    try {
      setIsSubmittingComment(true);
      const commentData = {
        text: newComment.trim(),
        post: currentPost.id
      };
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API
      const newCommentResponse = await createComment(commentData);
      console.log('–û—Ç–≤–µ—Ç API –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', newCommentResponse);
      
      setNewComment("");
      showSuccess('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω!');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É—è –æ—Ç–≤–µ—Ç –æ—Ç API)
      setComments(prevComments => [newCommentResponse, ...prevComments]);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
      dispatch(fetchPostBySlugAction(slug));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
      showError(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
    } finally {
      setIsSubmittingComment(false);
    }
  };

  if (slug) {
    return (
      <div className="min-h-screen bg-gray-50 pt-24">
        {loading ? (
          <div className="max-w-4xl mx-auto p-6">
            <div className="bg-white rounded-lg shadow-md p-8 animate-pulse">
              <div className="h-8 bg-gray-300 rounded w-3/4 mb-4"></div>
              <div className="h-4 bg-gray-300 rounded w-1/2 mb-6"></div>
              <div className="space-y-3">
                <div className="h-4 bg-gray-300 rounded"></div>
                <div className="h-4 bg-gray-300 rounded"></div>
                <div className="h-4 bg-gray-300 rounded w-5/6"></div>
              </div>
            </div>
          </div>
        ) : error ? (
          <div className="max-w-4xl mx-auto p-6">
            <div className="bg-red-50 border border-red-200 rounded-lg p-8 text-center">
              <h2 className="text-2xl font-bold text-red-800 mb-4">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
              <p className="text-red-600 mb-4">{error}</p>
              <Link to="/posts" className="text-blue-600 hover:underline">
                ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤
              </Link>
            </div>
          </div>
        ) : currentPost ? (
          <div className="max-w-4xl mx-auto p-6">
            <div className="bg-white rounded-lg shadow-md p-8">
              <h1 className="text-3xl font-bold text-gray-800 mb-4">{currentPost.title}</h1>
              <div className="flex items-center text-gray-600 mb-6">
                <span>–ê–≤—Ç–æ—Ä: {currentPost.author?.first_name || currentPost.author?.username}</span>
                <span className="mx-2">‚Ä¢</span>
                <span>{new Date(currentPost.created_at).toLocaleDateString('ru-RU')}</span>
              </div>
              <div className="prose max-w-none mb-6">
                {currentPost.content}
              </div>
              
              {/* –¢–µ–≥–∏ */}
              {currentPost.tags && currentPost.tags.length > 0 && (
                <div className="flex flex-wrap gap-2 mb-6">
                  {currentPost.tags.map((tag) => (
                    <span 
                      key={tag.id} 
                      className="px-3 py-1 bg-blue-100 text-blue-800 text-sm rounded-full"
                    >
                      #{tag.name}
                    </span>
                  ))}
                </div>
              )}

              {/* –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ */}
              <div className="flex items-center justify-between border-t pt-6">
                <div className="flex items-center space-x-4">
                  <button
                    onClick={handleLike}
                    disabled={isLiking}
                    className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors ${
                      currentPost.is_liked 
                        ? 'bg-red-100 text-red-600' 
                        : 'bg-gray-100 text-gray-600 hover:bg-red-50 hover:text-red-600'
                    } ${isLiking ? 'opacity-50 cursor-not-allowed' : ''}`}
                  >
                    <span>{currentPost.is_liked ? '‚ù§Ô∏è' : 'ü§ç'}</span>
                    <span>{isLiking ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : `${currentPost.likes_count || 0} –ª–∞–π–∫–æ–≤`}</span>
                  </button>
                  
                  <button
                    onClick={handleSave}
                    disabled={isSaving}
                    className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors ${
                      currentPost.is_saved
                        ? 'bg-yellow-100 text-yellow-600'
                        : 'bg-gray-100 text-gray-600 hover:bg-yellow-50 hover:text-yellow-600'
                    } ${isSaving ? 'opacity-50 cursor-not-allowed' : ''}`}
                  >
                    <span>{currentPost.is_saved ? 'üîñ' : 'üìë'}</span>
                    <span>{isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : (currentPost.is_saved ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å')}</span>
                  </button>
                </div>
                
                <Link 
                  to="/posts" 
                  className="text-blue-600 hover:underline"
                >
                  ‚Üê –ù–∞–∑–∞–¥ –∫ –ø–æ—Å—Ç–∞–º
                </Link>
              </div>

              {/* –§–æ—Ä–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ */}
              <div className="mt-8 border-t pt-6">
                <h3 className="text-xl font-semibold text-gray-800 mb-4">
                  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ({currentPost.comments_count || 0})
                </h3>
                
                {user ? (
                  <form onSubmit={handleCommentSubmit} className="mb-6">
                    <textarea
                      value={newComment}
                      onChange={(e) => setNewComment(e.target.value)}
                      placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."
                      rows={3}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none"
                    />
                    <div className="flex justify-end mt-3">
                      <button
                        type="submit"
                        className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
                        disabled={!newComment.trim() || isSubmittingComment}
                      >
                        {isSubmittingComment ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'}
                      </button>
                    </div>
                  </form>
                ) : (
                  <div className="bg-gray-50 rounded-lg p-4 text-center mb-6">
                    <p className="text-gray-600 mb-3">–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</p>
                    <Link 
                      to="/login" 
                      className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                    >
                      –í–æ–π—Ç–∏
                    </Link>
                  </div>
                )}

                {/* –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ */}
                <div className="space-y-4">
                  {commentsLoading ? (
                    <div className="bg-gray-50 rounded-lg p-4 text-center">
                      <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mx-auto mb-2"></div>
                      <span className="text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...</span>
                    </div>
                  ) : comments.length > 0 ? (
                    comments.map((comment) => {
                      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                      console.log('–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', comment);
                      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', comment.user);
                      
                      return (
                        <div key={comment.id} className="bg-white rounded-lg p-4 shadow-sm border">
                          <div className="flex items-center justify-between mb-3">
                            <div className="flex items-center">
                              <div className="w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center text-white font-bold mr-3">
                                {(comment.user?.first_name?.[0] || comment.user?.username?.[0] || 'U').toUpperCase()}
                              </div>
                              <div>
                                <div className="font-medium text-gray-900">
                                  {comment.user?.first_name && comment.user?.last_name 
                                    ? `${comment.user.first_name} ${comment.user.last_name}`
                                    : comment.user?.username || '–ê–Ω–æ–Ω–∏–º'
                                  }
                                </div>
                                <div className="text-sm text-gray-500">
                                  {new Date(comment.created_at).toLocaleDateString('ru-RU', {
                                    year: 'numeric',
                                    month: 'long',
                                    day: 'numeric',
                                    hour: '2-digit',
                                    minute: '2-digit'
                                  })}
                                </div>
                              </div>
                            </div>
                            
                            {comment.likes_count > 0 && (
                              <div className="flex items-center text-gray-500">
                                <span className="text-sm">‚ù§Ô∏è {comment.likes_count}</span>
                              </div>
                            )}
                          </div>
                          
                          <div className="text-gray-800 leading-relaxed">
                            {comment.text || comment.content}
                          </div>
                        </div>
                      );
                    })
                  ) : (
                    <div className="bg-gray-50 rounded-lg p-4 text-center text-gray-500">
                      {currentPost?.comments_count > 0 
                        ? '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...'
                        : '–ü–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!'
                      }
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        ) : (
          <div className="max-w-4xl mx-auto p-6">
            <div className="bg-gray-50 rounded-lg p-8 text-center">
              <h2 className="text-2xl font-bold text-gray-800 mb-4">–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
              <Link to="/posts" className="text-blue-600 hover:underline">
                ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤
              </Link>
            </div>
          </div>
        )}
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 pt-24">
      <div className="max-w-7xl mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-6">–í—Å–µ –ø–æ—Å—Ç—ã</h1>
          
          <div className="flex flex-wrap gap-4 mb-6">
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="flex-1 min-w-64 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
              <option value="tech">–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</option>
              <option value="design">–î–∏–∑–∞–π–Ω</option>
              <option value="travel">–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è</option>
            </select>
            
            <select
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="-created_at">–°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ</option>
              <option value="created_at">–°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ</option>
              <option value="-likes_count">–ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏</option>
            </select>
          </div>
        </div>

        {loading ? (
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {[...Array(6)].map((_, index) => (
              <div key={index} className="bg-white rounded-lg shadow-md p-6 animate-pulse">
                <div className="h-6 bg-gray-300 rounded w-3/4 mb-4"></div>
                <div className="h-4 bg-gray-300 rounded w-full mb-2"></div>
                <div className="h-4 bg-gray-300 rounded w-5/6"></div>
              </div>
            ))}
          </div>
        ) : error ? (
          <div className="text-center py-16">
            <h2 className="text-2xl font-bold text-gray-800 mb-4">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
            <p className="text-gray-600 mb-4">{error}</p>
            <button 
              onClick={() => dispatch(fetchPosts())}
              className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        ) : (
          <>
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
              {posts.map((post) => (
                <PostCard key={post.id} post={post} />
              ))}
            </div>
            
            {posts.length === 0 && (
              <div className="text-center py-16">
                <h2 className="text-2xl font-bold text-gray-800 mb-4">–ü–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h2>
                <p className="text-gray-600">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default Posts;
